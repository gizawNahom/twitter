{
  "consumer": {
    "name": "twitter-client"
  },
  "interactions": [
    {
      "description": "a request to create a post with a valid text",
      "request": {
        "body": {
          "operationName": "createPost",
          "query": "mutation createPost($text: String!) {\n            createPost(text: $text) {\n              id\n              text\n              userId\n              createdAt\n              __typename\n            }\n          }",
          "variables": {
            "text": "Hello World"
          }
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "matchingRules": {
          "$.body.query": {
            "match": "regex",
            "regex": "mutation\\s*createPost\\(\\$text:\\s*String!\\)\\s*\\{\\s*createPost\\(text:\\s*\\$text\\)\\s*\\{\\s*id\\s*text\\s*userId\\s*createdAt\\s*__typename\\s*\\}\\s*\\}"
          },
          "$.body.variables.text": {
            "match": "type"
          }
        },
        "method": "POST",
        "path": "/graphql"
      },
      "response": {
        "body": {
          "data": {
            "createPost": {
              "__typename": "Post",
              "createdAt": "2023-12-09T04:47:07Z",
              "id": "postId1",
              "text": "Hello World",
              "userId": "userId1"
            }
          }
        },
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "matchingRules": {
          "$.body.data.createPost.__typename": {
            "match": "type"
          },
          "$.body.data.createPost.createdAt": {
            "match": "type"
          },
          "$.body.data.createPost.id": {
            "match": "type"
          },
          "$.body.data.createPost.text": {
            "match": "type"
          },
          "$.body.data.createPost.userId": {
            "match": "type"
          }
        },
        "status": 200
      }
    },
    {
      "description": "a request to create a post with an invalid text",
      "request": {
        "body": {
          "operationName": "createPost",
          "query": "mutation createPost($text: String!) {\n            createPost(text: $text) {\n              id\n              text\n              userId\n              createdAt\n              __typename\n            }\n          }",
          "variables": {
            "text": ""
          }
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "matchingRules": {
          "$.body.query": {
            "match": "regex",
            "regex": "mutation\\s*createPost\\(\\$text:\\s*String!\\)\\s*\\{\\s*createPost\\(text:\\s*\\$text\\)\\s*\\{\\s*id\\s*text\\s*userId\\s*createdAt\\s*__typename\\s*\\}\\s*\\}"
          },
          "$.body.variables.text": {
            "match": "type"
          }
        },
        "method": "POST",
        "path": "/graphql"
      },
      "response": {
        "body": {
          "data": {
            "createPost": null
          },
          "errors": [
            {
              "message": "Generic error"
            }
          ]
        },
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "matchingRules": {
          "$.body.errors[0].message": {
            "match": "type"
          }
        },
        "status": 200
      }
    },
    {
      "description": "a request to fetch a post with an invalid post id",
      "request": {
        "body": {
          "operationName": "post",
          "query": "query post($id: ID!) {\n            post(id: $id) {\n              id\n              text\n              userId\n              createdAt\n              __typename\n            }\n          }",
          "variables": {
            "id": ""
          }
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "matchingRules": {
          "$.body.query": {
            "match": "regex",
            "regex": "query\\s*post\\(\\$id:\\s*ID!\\)\\s*\\{\\s*post\\(id:\\s*\\$id\\)\\s*\\{\\s*id\\s*text\\s*userId\\s*createdAt\\s*__typename\\s*\\}\\s*\\}"
          },
          "$.body.variables.id": {
            "match": "type"
          }
        },
        "method": "POST",
        "path": "/graphql"
      },
      "response": {
        "body": {
          "data": {
            "post": null
          },
          "errors": [
            {
              "message": "Generic error"
            }
          ]
        },
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "matchingRules": {
          "$.body.errors[0].message": {
            "match": "type"
          }
        },
        "status": 200
      }
    },
    {
      "description": "a request to fetch created posts with invalid id, offset and limit",
      "request": {
        "body": {
          "operationName": "Posts",
          "query": "\n        query Posts($userId: ID!, $offset: Int!, $limit: Int!) {\n          posts(userId: $userId, offset: $offset, limit: $limit) {\n            id\n            text\n            userId\n            createdAt\n            __typename\n          }\n        }\n      ",
          "variables": {
            "limit": -10,
            "offset": -1,
            "userId": ""
          }
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "matchingRules": {
          "$.body.query": {
            "match": "regex",
            "regex": "\\s*query\\s*Posts\\(\\$userId:\\s*ID!,\\s*\\$offset:\\s*Int!,\\s*\\$limit:\\s*Int!\\)\\s*\\{\\s*posts\\(userId:\\s*\\$userId,\\s*offset:\\s*\\$offset,\\s*limit:\\s*\\$limit\\)\\s*\\{\\s*id\\s*text\\s*userId\\s*createdAt\\s*__typename\\s*\\}\\s*\\}\\s*"
          },
          "$.body.variables.limit": {
            "match": "type"
          },
          "$.body.variables.offset": {
            "match": "type"
          },
          "$.body.variables.userId": {
            "match": "type"
          }
        },
        "method": "POST",
        "path": "/graphql"
      },
      "response": {
        "body": {
          "data": {
            "posts": null
          },
          "errors": [
            {
              "message": "Generic error"
            }
          ]
        },
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "matchingRules": {
          "$.body.errors[0].message": {
            "match": "type"
          }
        },
        "status": 200
      }
    },
    {
      "description": "a request to search posts with invalid query, offset and limit",
      "request": {
        "body": {
          "operationName": "SearchPosts",
          "query": "query SearchPosts($query: String!, $limit: Int!, $offset: Int!) {\n            searchPosts(query: $query, limit: $limit, offset: $offset) {\n              id\n              text\n              userId\n              createdAt\n              __typename\n            }\n          }",
          "variables": {
            "limit": -10,
            "offset": -1,
            "query": ""
          }
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "matchingRules": {
          "$.body.query": {
            "match": "regex",
            "regex": "query\\s*SearchPosts\\(\\$query:\\s*String!,\\s*\\$limit:\\s*Int!,\\s*\\$offset:\\s*Int!\\)\\s*\\{\\s*searchPosts\\(query:\\s*\\$query,\\s*limit:\\s*\\$limit,\\s*offset:\\s*\\$offset\\)\\s*\\{\\s*id\\s*text\\s*userId\\s*createdAt\\s*__typename\\s*\\}\\s*\\}"
          },
          "$.body.variables.limit": {
            "match": "type"
          },
          "$.body.variables.offset": {
            "match": "type"
          },
          "$.body.variables.query": {
            "match": "type"
          }
        },
        "method": "POST",
        "path": "/graphql"
      },
      "response": {
        "body": {
          "data": {
            "posts": null
          },
          "errors": [
            {
              "message": "Generic error"
            }
          ]
        },
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "matchingRules": {
          "$.body.errors[0].message": {
            "match": "type"
          }
        },
        "status": 200
      }
    },
    {
      "description": "a request to fetch a post with a valid post id",
      "providerState": "a post with the id exists",
      "request": {
        "body": {
          "operationName": "post",
          "query": "query post($id: ID!) {\n            post(id: $id) {\n              id\n              text\n              userId\n              createdAt\n              __typename\n            }\n          }",
          "variables": {
            "id": "postId1"
          }
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "matchingRules": {
          "$.body.query": {
            "match": "regex",
            "regex": "query\\s*post\\(\\$id:\\s*ID!\\)\\s*\\{\\s*post\\(id:\\s*\\$id\\)\\s*\\{\\s*id\\s*text\\s*userId\\s*createdAt\\s*__typename\\s*\\}\\s*\\}"
          },
          "$.body.variables.id": {
            "match": "type"
          }
        },
        "method": "POST",
        "path": "/graphql"
      },
      "response": {
        "body": {
          "data": {
            "post": {
              "__typename": "Post",
              "createdAt": "2023-12-09T04:47:07Z",
              "id": "postId1",
              "text": "Hello World",
              "userId": "userId1"
            }
          }
        },
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "matchingRules": {
          "$.body.data.post.__typename": {
            "match": "type"
          },
          "$.body.data.post.createdAt": {
            "match": "type"
          },
          "$.body.data.post.id": {
            "match": "type"
          },
          "$.body.data.post.text": {
            "match": "type"
          },
          "$.body.data.post.userId": {
            "match": "type"
          }
        },
        "status": 200
      }
    },
    {
      "description": "a request to fetch created posts with valid id, offset and limit",
      "providerState": "a user has created a post",
      "request": {
        "body": {
          "operationName": "Posts",
          "query": "\n        query Posts($userId: ID!, $offset: Int!, $limit: Int!) {\n          posts(userId: $userId, offset: $offset, limit: $limit) {\n            id\n            text\n            userId\n            createdAt\n            __typename\n          }\n        }\n      ",
          "variables": {
            "limit": 10,
            "offset": 0,
            "userId": "userId1"
          }
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "matchingRules": {
          "$.body.query": {
            "match": "regex",
            "regex": "\\s*query\\s*Posts\\(\\$userId:\\s*ID!,\\s*\\$offset:\\s*Int!,\\s*\\$limit:\\s*Int!\\)\\s*\\{\\s*posts\\(userId:\\s*\\$userId,\\s*offset:\\s*\\$offset,\\s*limit:\\s*\\$limit\\)\\s*\\{\\s*id\\s*text\\s*userId\\s*createdAt\\s*__typename\\s*\\}\\s*\\}\\s*"
          },
          "$.body.variables.limit": {
            "match": "type"
          },
          "$.body.variables.offset": {
            "match": "type"
          },
          "$.body.variables.userId": {
            "match": "type"
          }
        },
        "method": "POST",
        "path": "/graphql"
      },
      "response": {
        "body": {
          "data": {
            "posts": [
              {
                "__typename": "Post",
                "createdAt": "2023-12-09T04:47:07Z",
                "id": "postId1",
                "text": "Hello World",
                "userId": "userId1"
              }
            ]
          }
        },
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "matchingRules": {
          "$.body.data.posts[0].__typename": {
            "match": "type"
          },
          "$.body.data.posts[0].createdAt": {
            "match": "type"
          },
          "$.body.data.posts[0].id": {
            "match": "type"
          },
          "$.body.data.posts[0].text": {
            "match": "type"
          },
          "$.body.data.posts[0].userId": {
            "match": "type"
          }
        },
        "status": 200
      }
    },
    {
      "description": "a request to search posts with query, offset and limit",
      "providerState": "there are saved posts",
      "request": {
        "body": {
          "operationName": "SearchPosts",
          "query": "query SearchPosts($query: String!, $limit: Int!, $offset: Int!) {\n            searchPosts(query: $query, limit: $limit, offset: $offset) {\n              id\n              text\n              userId\n              createdAt\n              __typename\n            }\n          }",
          "variables": {
            "limit": 10,
            "offset": 0,
            "query": "hello"
          }
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "matchingRules": {
          "$.body.query": {
            "match": "regex",
            "regex": "query\\s*SearchPosts\\(\\$query:\\s*String!,\\s*\\$limit:\\s*Int!,\\s*\\$offset:\\s*Int!\\)\\s*\\{\\s*searchPosts\\(query:\\s*\\$query,\\s*limit:\\s*\\$limit,\\s*offset:\\s*\\$offset\\)\\s*\\{\\s*id\\s*text\\s*userId\\s*createdAt\\s*__typename\\s*\\}\\s*\\}"
          },
          "$.body.variables.limit": {
            "match": "type"
          },
          "$.body.variables.offset": {
            "match": "type"
          },
          "$.body.variables.query": {
            "match": "type"
          }
        },
        "method": "POST",
        "path": "/graphql"
      },
      "response": {
        "body": {
          "data": {
            "searchPosts": [
              {
                "__typename": "Post",
                "createdAt": "2023-12-09T04:47:07Z",
                "id": "postId1",
                "text": "Hello World",
                "userId": "userId1"
              }
            ]
          }
        },
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "matchingRules": {
          "$.body.data.searchPosts[0].__typename": {
            "match": "type"
          },
          "$.body.data.searchPosts[0].createdAt": {
            "match": "type"
          },
          "$.body.data.searchPosts[0].id": {
            "match": "type"
          },
          "$.body.data.searchPosts[0].text": {
            "match": "type"
          },
          "$.body.data.searchPosts[0].userId": {
            "match": "type"
          }
        },
        "status": 200
      }
    }
  ],
  "metadata": {
    "pact-js": {
      "version": "12.1.1"
    },
    "pactRust": {
      "ffi": "0.4.9",
      "models": "1.1.11"
    },
    "pactSpecification": {
      "version": "2.0.0"
    }
  },
  "provider": {
    "name": "twitter-server"
  }
}